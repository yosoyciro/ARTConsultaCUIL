{"ast":null,"code":"var Orientation = require('react-native').NativeModules.Orientation;\n\nvar DeviceEventEmitter = require('react-native').DeviceEventEmitter;\n\nvar listeners = {};\nvar orientationDidChangeEvent = 'orientationDidChange';\nvar specificOrientationDidChangeEvent = 'specificOrientationDidChange';\nvar id = 0;\nvar META = '__listener_id';\n\nfunction getKey(listener) {\n  if (!listener.hasOwnProperty(META)) {\n    if (!Object.isExtensible(listener)) {\n      return 'F';\n    }\n\n    Object.defineProperty(listener, META, {\n      value: 'L' + ++id\n    });\n  }\n\n  return listener[META];\n}\n\n;\nmodule.exports = {\n  getOrientation: function getOrientation(cb) {\n    Orientation.getOrientation(function (error, orientation) {\n      cb(error, orientation);\n    });\n  },\n  getSpecificOrientation: function getSpecificOrientation(cb) {\n    Orientation.getSpecificOrientation(function (error, orientation) {\n      cb(error, orientation);\n    });\n  },\n  lockToPortrait: function lockToPortrait() {\n    Orientation.lockToPortrait();\n  },\n  lockToLandscape: function lockToLandscape() {\n    Orientation.lockToLandscape();\n  },\n  lockToLandscapeRight: function lockToLandscapeRight() {\n    Orientation.lockToLandscapeRight();\n  },\n  lockToLandscapeLeft: function lockToLandscapeLeft() {\n    Orientation.lockToLandscapeLeft();\n  },\n  unlockAllOrientations: function unlockAllOrientations() {\n    Orientation.unlockAllOrientations();\n  },\n  addOrientationListener: function addOrientationListener(cb) {\n    var key = getKey(cb);\n    listeners[key] = DeviceEventEmitter.addListener(orientationDidChangeEvent, function (body) {\n      cb(body.orientation);\n    });\n  },\n  removeOrientationListener: function removeOrientationListener(cb) {\n    var key = getKey(cb);\n\n    if (!listeners[key]) {\n      return;\n    }\n\n    listeners[key].remove();\n    listeners[key] = null;\n  },\n  addSpecificOrientationListener: function addSpecificOrientationListener(cb) {\n    var key = getKey(cb);\n    listeners[key] = DeviceEventEmitter.addListener(specificOrientationDidChangeEvent, function (body) {\n      cb(body.specificOrientation);\n    });\n  },\n  removeSpecificOrientationListener: function removeSpecificOrientationListener(cb) {\n    var key = getKey(cb);\n\n    if (!listeners[key]) {\n      return;\n    }\n\n    listeners[key].remove();\n    listeners[key] = null;\n  },\n  getInitialOrientation: function getInitialOrientation() {\n    return Orientation.initialOrientation;\n  }\n};","map":{"version":3,"sources":["C:/Desarrollo/ReactNative/ARTConsultaCUIL/node_modules/react-native-orientation/index.js"],"names":["Orientation","require","NativeModules","DeviceEventEmitter","listeners","orientationDidChangeEvent","specificOrientationDidChangeEvent","id","META","getKey","listener","hasOwnProperty","Object","isExtensible","defineProperty","value","module","exports","getOrientation","cb","error","orientation","getSpecificOrientation","lockToPortrait","lockToLandscape","lockToLandscapeRight","lockToLandscapeLeft","unlockAllOrientations","addOrientationListener","key","addListener","body","removeOrientationListener","remove","addSpecificOrientationListener","specificOrientation","removeSpecificOrientationListener","getInitialOrientation","initialOrientation"],"mappings":"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","sourcesContent":["var Orientation = require('react-native').NativeModules.Orientation;\nvar DeviceEventEmitter = require('react-native').DeviceEventEmitter;\n\nvar listeners = {};\nvar orientationDidChangeEvent = 'orientationDidChange';\nvar specificOrientationDidChangeEvent = 'specificOrientationDidChange';\n\nvar id = 0;\nvar META = '__listener_id';\n\nfunction getKey(listener) {\n  if (!listener.hasOwnProperty(META)) {\n    if (!Object.isExtensible(listener)) {\n      return 'F';\n    }\n\n    Object.defineProperty(listener, META, {\n      value: 'L' + ++id,\n    });\n  }\n\n  return listener[META];\n};\n\nmodule.exports = {\n  getOrientation(cb) {\n    Orientation.getOrientation((error,orientation) =>{\n      cb(error, orientation);\n    });\n  },\n\n  getSpecificOrientation(cb) {\n    Orientation.getSpecificOrientation((error,orientation) =>{\n      cb(error, orientation);\n    });\n  },\n\n  lockToPortrait() {\n    Orientation.lockToPortrait();\n  },\n\n  lockToLandscape() {\n    Orientation.lockToLandscape();\n  },\n\n  lockToLandscapeRight() {\n    Orientation.lockToLandscapeRight();\n  },\n\n  lockToLandscapeLeft() {\n    Orientation.lockToLandscapeLeft();\n  },\n\n  unlockAllOrientations() {\n    Orientation.unlockAllOrientations();\n  },\n\n  addOrientationListener(cb) {\n    var key = getKey(cb);\n    listeners[key] = DeviceEventEmitter.addListener(orientationDidChangeEvent,\n      (body) => {\n        cb(body.orientation);\n      });\n  },\n\n  removeOrientationListener(cb) {\n    var key = getKey(cb);\n\n    if (!listeners[key]) {\n      return;\n    }\n\n    listeners[key].remove();\n    listeners[key] = null;\n  },\n\n  addSpecificOrientationListener(cb) {\n    var key = getKey(cb);\n\n    listeners[key] = DeviceEventEmitter.addListener(specificOrientationDidChangeEvent,\n      (body) => {\n        cb(body.specificOrientation);\n      });\n  },\n\n  removeSpecificOrientationListener(cb) {\n    var key = getKey(cb);\n\n    if (!listeners[key]) {\n      return;\n    }\n\n    listeners[key].remove();\n    listeners[key] = null;\n  },\n\n  getInitialOrientation() {\n    return Orientation.initialOrientation;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}